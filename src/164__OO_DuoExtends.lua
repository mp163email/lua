---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangyu.
--- DateTime: 2019-2-20 15:30
---完全自己默写的，真牛逼
--- 多继承， 多个基类（父类）创建了一个新类， 这个新类能产生实例， 遍历所有父类的去找，找到后就返回
---将--index定义成一个方法，这个方法就是遍历所有基类去找key

---构建2个基类
---第一个基类
local Named = {}
Named.getName = function()
    return Named.name
end
Named.setName = function (n)
    Named.name = n
end
print(Named.name)
Named.setName("miao peng")
print(Named.name)

---第二个基类
local Account = {
    balance = 0,
}
function Account:fuzhi(v)
    self.balance = v
end

---遍历所有基类， 找到一个key
local function search(base, key)
    for i = 1, #base do
        if base[i][key] then
            return base[i][key]
        end
    end
end

---创建新类，并包装上面从基类中查找key的方法
local function createClass(...)--接收所有的基类
    local allBase = {...}
    local c = {}--定义一个供外部创建实例的中间类, 中间过渡用的
    setmetatable(c, {__index = function (t, k)--__index定义成函数时，要有返回值***这是c的元表***
        return search(allBase, k)
    end})

    function c:new(n)
        n = n or {}
        setmetatable(n, c) --- 这是n的元表
        c.__index = c
        return n
    end
    return c
end

---测试
print("-------------")
local newClass = createClass(Named, Account)--创建新类
local newClassInstance = newClass:new{}--创建新类的实例
print(newClassInstance.balance)
print(newClassInstance.getName())
