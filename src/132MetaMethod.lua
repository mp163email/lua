---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangyu.
--- DateTime: 2019-2-21 15:51
--- 元方法， 演示两个table相加
--- 两个table是不能相加的，但是可以通过修改元表，让他变成可能。
---算数类的元方法：加=__add， 减=__sub, 乘=__mul，除=__div, 相反数=__unm, 取模=__mod, 指数=__pow
---关系类的元方法：等于=__eq， 小于=__lt, 小于等于=__le
---库定义的元方法：转换成一个字符串=__tostring
---table最初是没有元表的，首先要定义一个元表
---可以修改元表来修改一个值的行为， 使其在面对一个非预定义的操作时执行一个指定的操作， 比如两个table相加

--定义两个table
local tb1 = {x = 1, y = 2, z = 3}
--local tb2 = {a = "a", b = "miao", c = "c"}

--指定元表
local mt = {}
setmetatable(tb1, mt)
--setmetatable(tb2, mt)

setmetatable(_G, mt)

mt.__index = function (t,k)
    print("aaaaaa")
end

print(sssx)
--[[
--指定元表的__add方法
function union(a, b)
    local c = {}
    for i, v in pairs(a) do
        c[i] = v
    end
    for i, v in pairs(b) do
        c[i] = v
    end
    return c
end
mt.__add = union

local c = tb1 + tb2
for i, v in pairs(c) do
    print(i, v)
end
---两个table是否相等key都相等， v也都相等
print("--------------")
local tt1 = {1, 2, 3}
local tt2 = {1, 2, 3}
local mmt = {}
setmetatable(tt1, mmt)
setmetatable(tt2, mmt)
function eq (a, b)
    for i, v in pairs(a) do
        if a[i] ~= b[i] then
            return false
        end
    end
    return true
end
mmt.__eq = eq
print(eq(tt1, tt2))
print("有点意思, 呵呵")

---打印一个table
local mt1 = {}
function tostring (t)
    local ret = {}
    for i, v in pairs(t) do
        local kv = i .. " = " .. v
        table.insert(ret, kv)
    end
    return table.concat(ret, ",")
end
mt1.__tostring = tostring
local testtb = {x = "x", y = 1, 10}
setmetatable(testtb, mt1)
print(testtb)]]
