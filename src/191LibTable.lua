---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/2/23 8:45
--- 常用的有insert, remove, sort, concat
local tt = {1,2,3}
table.insert(tt, 1, 10)--指定位置， 1-可以表示首位置
print(table.unpack(tt))
table.insert(tt, 1000)--默认插入到最后位置
print(table.unpack(tt))

print(table.remove(tt))--默认删除最后一个
print(table.remove(tt, 1))--指定索引位置删除，删除完会有移动开销

local tt1 = {1,3,2}
table.sort(tt1)--默认是升序
print(table.unpack(tt1))
table.sort(tt1, function (n1, n2)
    return n1 > n2--倒叙
end)
print(table.unpack(tt1))
print("------按key来排序------")
local tt2 = {x = 1, z = 3, y = 2}
local keys = {}
for i, v in pairs(tt2) do
    keys[#keys + 1] = i
end
table.sort(keys)
for k, v in pairs(keys) do
    print(tt2[v])
end
print("------也可以自己构造一个按key来排序的迭代器")
function iter(tt)
    local ks = {}
    for i, v in pairs(tt) do
        ks[#ks + 1] = i
    end
    table.sort(ks)
    local i = 0
    return function ()
        i = i + 1
        return ks[i], tt[ks[i]]
    end
end
for i, v in iter(tt2) do
    print(i, v)
end
print("-----concat的扩展-----嵌套table的concat")
function rconcat (l)
    if type(l) ~= "table" then
        return l
    end
    local res = {}
    for i = 1, #l do
        res[i] = rconcat(l[i])--上面的return l 返回的是这里
    end
    return table.concat(res)--这里的返回才是返回给外面的调用者
end
local ttt1 = {{"I ", " am "}, " miao ", {{{" peng"}}}}
print(rconcat(ttt1))