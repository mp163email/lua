---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangyu.
--- DateTime: 2019-2-18 15:28
---

local co = coroutine.create(function()
    for i = 1, 10 do
        print(i)
        coroutine.yield()
    end
end)
for i = 1, 10 do
    coroutine.resume(co)
end
print(coroutine.status(co))--suspended
coroutine.resume(co)--传入的函数执行完了
print(coroutine.status(co))--dead

---通过一对resume-yield来交换数据
print("---------")
local c1 = coroutine.create(function(a, b, c)
    print(a, b, c)
end)
print(coroutine.resume(c1, 1, 2, 3))--返回true表示没有错误
print("---------")
local c2 = coroutine.create(function(a, b)
    coroutine.yield(a + b, a - b)
    return 66, 77
end)
print(coroutine.resume(c2, 20, 10))--  ***能把yield的参数返回给resume*** yield挂起的时候，输出coroutine.resume的时候返回的是，true和传入yield的参数
print(coroutine.resume(c2, 20, 10))--yield挂起被唤醒，并且协程函数执行完了以后，true后面跟的是主函数的返回值
print("---------")
local c3 = coroutine.create(function()
        print("co", coroutine.yield())--于此对应的是yield唤醒后，返回的是resume传入的多余的值
end)
coroutine.resume(c3)
coroutine.resume(c3, 4, 5)--  ***通过resume给yield赋值*****于此对应的是yield返回的是resume传入的多余的值
print("----当一个协同程序结束时，它的主函数所返回的值都将作为resume的返回值-----")
local co4 = coroutine.create(function()
    return 6, 7
end)
print(coroutine.resume(co4))

----能把yield的参数返回给resume
----能通过resume给yield赋值